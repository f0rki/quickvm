#!/usr/bin/env bash
#
# quickvm:
# Quickly clone/start/stop/run commands on/delete a VM with libvirt
#
# Copyright (c) 2015 Michael Rodler <contact@f0rki.at>
#
# Licensed under the MIT license, see LICENSE for more information.
#
#
set -eu -o pipefail
#set -evx

# regarding coding style - this script tries to follow the following
# guidelines:
# https://github.com/azet/community_bash_style_guide
# also shellchecked

QUICKVM_USAGE="$0 <command> [command options]"

# setup sane default here, will be overwritten with read_config
QUICKVM_CONFIG_DIR="$HOME/.config/quickvm/"
QUICKVM_CONFIG_FILE="$QUICKVM_CONFIG_DIR/config.sh"
QUICKVM_LIBVIRT_URL="qemu:///system"
QUICKVM_SIZE="20G"
QUICKVM_STORAGE_POOL="default"
QUICKVM_VCPUS="1"
QUICKVM_MEMORY="1024"
QUICKVM_USER="$USER"
declare -i QUICKVM_WAITSTART
QUICKVM_WAITSTART=5
QUICKVM_TRANSFER_COMMAND="rsync"
QUICKVM_TRANSFER_ARGS="-r"
QUICKVM_VIEWER_APP="virt-viewer"


# help message for the commands
declare -A QUICKVM_COMMANDS
QUICKVM_COMMANDS[clone]="<newvm> <basevm>\n create newvm based on first basevm disk"
QUICKVM_COMMANDS[list]=" \n list all virtual machines"
QUICKVM_COMMANDS[shell]="[--user|-u user] <vm> [command]\n ssh into and optionally execute the given commands"
QUICKVM_COMMANDS[sshkeys]="[--user|-u user] <vm>\n install ssh public keys on the vm using ssh-copy-id"
QUICKVM_COMMANDS[start]="<vm>\n start a vm"
QUICKVM_COMMANDS[stop-all]="<vm>\n stop all VMs created by quickvm"
QUICKVM_COMMANDS[stop]="<vm>\n delete a vm"
QUICKVM_COMMANDS[trash]="<vm>\n delete a vm and associated storage images created by quickvm"
QUICKVM_COMMANDS[ipaddr]="<vm>\n print the ip addr of the given vm"
QUICKVM_COMMANDS[virsh]="<virsh commands>\n just execute virsh with the given command"
QUICKVM_COMMANDS[view]="<vm>\n launch viewer application for the given vm"
QUICKVM_COMMANDS[push]="[--user|-u user] <vm> <local> <remote>\n transfer data to vm"
QUICKVM_COMMANDS[pull]="[--user|-u user] <vm> <remote> [local=./]\n transfer data from vm"


function quickvm_help_for() {
    #set -evx
    declare -a lines
    IFS=$'\n' lines=($(echo ${QUICKVM_COMMANDS[$1]} | sed 's/\\n/\n/g'))
    printf "%s %s\n" "$1" "${lines[0]}"
    lines=("${lines[@]:1}")
    for line in "${lines[@]}"; do
        printf "    %s\n" "$line"
    done
}

function quickvm_log_error() {
    printf "quickvm-error: " >&2
    printf "$@" >&2
    echo "" >&2
}

function __quickvm_fail_hard() {
    quickvm_log_error "$@"
    exit 1
}

function quickvm_log_warn() {
    printf "quickvm-warn: " >&2
    printf "$@" >&2
    echo "" >&2
}

function __quickvm_sudo() {
    if [[ -x $(which sudo) ]]; then
        sudo "$@"
    else
        su -c "$*"
    fi
}

function __quickvm_virsh() {
    virsh -q -c "$QUICKVM_LIBVIRT_URL" "$@"
}

function __was_created_by_quickvm() {
    __quickvm_get_desc "$1" | grep -i 'quickvm' > /dev/null
}

function __quickvm_get_ipaddr() {
    declare -a netinfo
    local ipaddr
    ipaddr=""
    netinfo=($(__quickvm_virsh domifaddr "$1"))
    if [[ $? -eq 0 && "$netinfo" != "" ]]; then
        if [[ "${netinfo[2]}" == "ipv4" ]]; then
            ipaddr=$(echo "${netinfo[3]}" | sed 's/\/[0-9]\{2\}//g')
        else
            ipaddr="${netinfo[3]}"
        fi
        echo "$ipaddr"
        return 0
    else
        echo ""
        return 1
    fi
}

# http://stackoverflow.com/questions/24412721/elegant-solution-to-implement-timeout-for-bash-commands-and-functions/24413646?noredirect=1#24413646
function __quickvm_timeout() {
    local time=10
    if [[ $1 =~ ^[0-9]+$ ]]; then time=$1; shift; fi
    # Run in a subshell to avoid job control messages
    # trap SIGTERM to avoid default notification in non-interactive shell
    ( "$@" &
      child=$!
      trap -- "" SIGTERM
      ( sleep $time
        kill $child 2> /dev/null ) &
      wait $child
    )
}

function quickvm_read_config() {
    # get default vcpu count based on the number of available CPU cores on the
    # host node
    local vcpus
    vcpus=($(virsh -c qemu:///system -q nodeinfo | grep 'CPU(s)'))
    vcpus="${vcpus[1]}"
    QUICKVM_VCPUS="$vcpus"

    if [[ -f "$QUICKVM_CONFIG_FILE" ]]; then
        source "$QUICKVM_CONFIG_FILE"
    fi
}

function __quickvm_has_state_running() {
    __quickvm_virsh domstate "$1" \
            | grep -i running >/dev/null
}

function quickvm_is_running() {
    if __quickvm_has_state_running "$1"; then
        local ipaddr
        ipaddr=$(__quickvm_get_ipaddr "$1")
        if [[ "$ipaddr" == "" ]]; then
            return 1
        else
            if ping -W 1 -c 1 "$ipaddr" 2>&1 >/dev/null; then
                return 0
            else
                return 1
            fi
        fi
    fi
    return 1
}

function quickvm_ensure_running() {
    if quickvm_is_running "$1"; then
        return 0
    else
        __quickvm_virsh "start" "$1"
        if [[ $? -ne 0 ]]; then
            quickvm_log_error "failed to start '$1' via virsh!"
            return 1
        fi

        # TODO: maybe we can replace this with timeout?
        for i in `seq 0 "$QUICKVM_WAITSTART"`; do
            if quickvm_is_running "$1"; then
                return 0
            else
                sleep 1
            fi
        done
    fi

    if quickvm_is_running "$1"; then
        return 0
    else
        quickvm_log_error "Failed to start VM $1 in ~ $QUICKVM_WAITSTART sec"
        return 1
    fi
}

function __quickvm_is_stopped() {
    local out
    out=$(__quickvm_virsh "domstate" "$1")
    if [[ $? -ne 0 ]]; then
        __quickvm_fail_hard "virsh failed"
    fi
    [[ "$out" =~ s|Shut\ o|Off ]]
}

function __quickvm_stop_vm() {
    __quickvm_virsh "shutdown" "$1"
}

function quickvm_ensure_stopped() {
    if ! __quickvm_is_stopped "$1"; then
        __quickvm_stop_vm "$1"

        for i in `seq 0 "$QUICKVM_WAITSTART"`; do
            if __quickvm_is_stopped "$1"; then
                sleep 1
                return 0
            else
                sleep 1
            fi
        done
    else
        sleep 1
        return 0
    fi
    quickvm_log_error "Failed to stop VM $1 in $QUICKVM_WAITSTART sec"
    return 1
}

function __quickvm_get_desc() {
    # args
    local vm
    vm="$1"
    #
    desc=$(__quickvm_virsh "desc" "$vm")
    if [[ $? -ne 0 || "$desc" == "" || "$desc" =~ N|no\ d|Desc ]]; then
        #quickvm_log_warn "couldn't get a description for $vm\n" "$desc"
        echo ""
    else
        echo "$desc"
    fi
}

function __quickvm_get_config_string() {
    # args
    local vm
    vm="$1"
    #
    local desc
    desc=$(__quickvm_get_desc "$vm")
    if [[ "$desc" == "" ]]; then
        echo ""
    else
        echo "$desc" \
            | grep 'quickvm-config{.\+}' -o -m 1 \
            | cut -d '{' -f 2
            #| head -c -2
    fi
}

function __quickvm_set_config_string() {
    # args
    local vm
    local config
    vm="$1"
    config="$2"
    #
    desc=$(__quickvm_get_desc "$vm")
    current=$(__quickvm_get_config_string "$vm")
    if [[ $? -ne 0 || "$current" == "" ]]; then
        __quickvm_virsh "desc" "$vm" \
            $(printf "$desc\nmetadata for quickvm:\nquickvm-config{${config}}\n") >/dev/null
    else
        __quickvm_virsh "desc" "$vm" \
            $(echo "$desc" \
                | sed "s/quickvm-config{.\+}/quickvm-config{$config}/") >/dev/null
    fi
}

function quickvm_config_set() {
    # args
    local vm
    local key
    local value
    vm="$1"
    key="$2"
    value="$3"
    #
    echo "DEBUG: get previous config"
    local config
    config=$(__quickvm_get_config_string "$vm")
    echo "got the following:"
    echo "$config"
    if echo "$config" | grep -F "$key" > /dev/null; then
        config=$(echo "$config" \
            | tr "," "\n" \
            | sed "s/$key=.\+/$key=$value/" \
            | tr "\n" ",")
    else
        if [[ "$config" == "" ]]; then
            config="$key=$value"
        else
            config="$config,$key=$value"
        fi
    fi
    __quickvm_set_config_string "$vm" "$config"
}

function quickvm_config_get() {
    # args
    local vm
    local key
    vm="$1"
    key="$2"
    #
    local config

    config=$(__quickvm_get_config_string "$vm")
    if [[ $? != 0 || "$config" == "" ]]; then
        echo ""
        return 1
    fi

    echo "$config" \
        | tr ',' "\n" \
        | awk -F= "\$1==\"$key\"{print \$2}" \
        | head -n 1
    return 0
}

function quickvm_get_user() {
    # args
    local vm
    vm="$1"
    #
    local user
    user=$(quickvm_config_get "$vm" "user")
    if [[ $? -ne 0 || "$user" == "" ]]; then
        echo "$QUICKVM_USER"
    else
        echo "$user"
    fi
}

function quickvm_cmd_virsh() {
    __quickvm_virsh "$@"
}

function quickvm_cmd_start() {

    if [[ $(quickvm_config_get "$1" "isbasevm") == "true" ]] ; then
        echo "WARNING: Starting and using a base VM might corrupt child VMs"
        echo "Do you really wanna do this? y/n"
        local choice
        read choice
        if ! [[ "$choice" =~ y ]]; then
            return 0
        fi
    fi
    quickvm_ensure_running "$1"
}

function quickvm_cmd_stopall() {
    local vms
    vms=$(__quickvm_virsh list --all)
    while read -r vmline; do
        declare -a vm
        vm=(${vmline})
        if [[ "${vm[2]}" == "running" ]]; then
            if __was_created_by_quickvm "${vm[1]}"; then
                __quickvm_stop_vm "${vm[1]}"
            fi
        fi
    done <<< "$vms"
}

function quickvm_cmd_stop() {
    if quickvm_is_running "$1"; then
        __quickvm_stop_vm "$1"
    fi
}

function quickvm_cmd_list() {
    __quickvm_virsh list --all
}

function quickvm_cmd_clone() {
    # args
    local new
    local base
    new="$1"
    base="$2"
    #

    if ! quickvm_ensure_stopped "$base"; then
        __quickvm_fail_hard "failed to stop basevm '%s'" "$base"
    fi

    # first get the first disk of the base VM
    declare -a x
    x=($(__quickvm_virsh domblklist "$base"))

    # because of a libvirt bug this doesn't work with qcow images
    # (https://bugzilla.redhat.com/show_bug.cgi?id=1235406)
    #_virsh -c vol-create-as \
    #    "$QUICKVM_STORAGE_POOL" "$NEWIMG" "$QUICKVM_SIZE" \
    #    --format qcow2 \
    #    --backing-vol "$BASEIMG"
    # get real path of baseimg
    local BASEIMG
    BASEIMG="${x[1]}"
    local NEWIMG
    local imgdir
    imgdir=$(dirname "$BASEIMG")
    NEWIMG="${imgdir}/${new}.qcow2"

    if [[ -d "${imgdir}" && -w "${imgdir}" ]]; then
        qemu-img create -f qcow2 \
            -o "backing_file=${BASEIMG}" \
            "$NEWIMG"
    else
        __quickvm_sudo qemu-img create -f qcow2 \
            -o "backing_file=${BASEIMG}" \
            "$NEWIMG"
    fi

    # use virt-install to create a new VM, basically this is the same as the
    # old VM with the cloned disk.
    virt-install --connect "$QUICKVM_LIBVIRT_URL" \
        --name "$new" \
        --virt-type "kvm" \
        --memory "$QUICKVM_MEMORY" \
        "--vcpus=${QUICKVM_VCPUS}"\
        --import \
        --disk "path=${NEWIMG},bus=virtio" \
        --graphics none \
        --noautoconsole \
        --graphics spice
        #--check disk_size=off \
        #--disk "size=20,format=qcow2,backing_store=$BASEIMG,sparse=yes,bus=virtio" \

    local user
    user=$(quickvm_get_user "$base")
    quickvm_config_set "$base" "isbasevm" "true"
    __quickvm_set_config_string "$new" "user=$user,base=$base"
}

function quickvm_cmd_trash() {
    local choice
    if [[ $1 == "-y" ]]; then
        choice="y"
        shift 1
    else
        echo "Deleting VM $1 and it's storage"
        echo "If it's used as a base for other VMs you will break those."
        echo "Are you sure? y/n"
        read choice
    fi
    if [[ "$choice" == "y" ]]; then
        if ! __quickvm_is_stopped "$1"; then
            # we can shutdown non-gracefully since, we will remove it anyway
            __quickvm_virsh "destroy" "$1"
            if [[ $? -ne 0 ]] ; then
                __quickvm_fail_hard "couldn't stop VM $1"
            fi
        fi
        __quickvm_virsh undefine "$1" --remove-all-storage >/dev/null
    fi
}

function quickvm_cmd_shell() {
    local vm
    local user
    local ipaddr

    if [[ "$1" == "-u" || "$1" == "--user" ]]; then
        user="$2"
        vm="$3"
        shift 3
    else
        vm="$1"
        user=$(quickvm_get_user "$vm")
        shift 1
    fi

    if quickvm_ensure_running "$vm"; then

        ipaddr=$(__quickvm_get_ipaddr "$vm")

        if [[ "$ipaddr" == "" || "$user" == "" ]]; then
            quickvm_log_error "VM '$vm' has no ip address."
            return 1
        else
            ssh "${user}@${ipaddr}" "$*"
            return $?
        fi
    else
        return 1
    fi
}

function quickvm_cmd_install_sshkeys() {
    local vm
    local user
    local ipaddr

    if [[ "$1" == "-u" || "$1" == "--user" ]]; then
        user="$2"
        vm="$3"
        shift 3
    else
        vm="$1"
        user=$(quickvm_get_user "$vm")
        shift 1
    fi

    if quickvm_ensure_running "$vm"; then

        ipaddr=$(__quickvm_get_ipaddr "$vm")

        if [[ "$ipaddr" == "" || "$user" == "" ]]; then
            quickvm_log_error "VM '$vm' has no ip address."
            return 1
        else
            ssh-copy-id "${user}@${ipaddr}"
        fi
    else
        return
    fi
}

function quickvm_cmd_transfer() {
    local vm
    local user
    local ipaddr
    local action

    if [[ $# -lt 1 ]]; then
        quickvm_log_error "invalid number of arguments '$*'"
        quickvm_help_for "pull"
        quickvm_help_for "push"
        return 1
    fi

    action="$1"
    if [[ "$action" != "pull" && "$action" != "push" ]]; then
        quickvm_log_error "invalid first argument '$1' must be (push|pull)"
        quickvm_help_for "pull"
        quickvm_help_for "push"
        return 1
    fi
    shift 1

    if [[ "$1" == "-u" || "$1" == "--user" ]]; then
        if [[ "$action" == "pull" && ( $# -lt 4 || $# -gt 5 ) ]] \
            || [[ "$action" == "push" && $# -ne 5 ]]; then
            quickvm_log_error "invalid number of arguments '$*'"
            quickvm_help_for "$action"
            return 1
        fi
        user="$2"
        vm="$3"
        shift 3
    else
        if [[ "$action" == "pull" && ( $# -lt 2 || $# -gt 3 ) ]] \
            || [[ "$action" == "push" && $# -ne 3 ]]; then
            quickvm_log_error "invalid number of arguments '$*'"
            quickvm_help_for "$action"
            return 1
        fi
        vm="$1"
        user=$(quickvm_get_user "$vm")
        shift 1
    fi

    if quickvm_ensure_running "$vm"; then

        ipaddr=$(__quickvm_get_ipaddr "$vm")

        if [[ "$ipaddr" == "" || "$user" == "" ]]; then
            quickvm_log_error "VM '$vm' has no ip address."
            return 1
        else
            local from
            local to
            local host
            host="${user}@${ipaddr}"
            if [[ "$action" == "push" ]]; then
                from="$1"
                to="${host}:$2"
            elif [[ "$action" == "pull" ]]; then
                from="${host}:$1"
                if [[ $# -eq 2 ]]; then
                    to="$2"
                else
                    to="."
                fi
            fi

            if ! (which "$QUICKVM_TRANSFER_COMMAND" 2>&1 >/dev/null && \
                quickvm_cmd_shell "-u" "$user" "$vm" which "$QUICKVM_TRANSFER_COMMAND" 2>&1 >/dev/null);
            then
                quickvm_log_warn "transfer command $QUICKVM_TRANSFER_COMMAND not available: falling back to scp"
                QUICKVM_TRANSFER_COMMAND="scp"
                QUICKVM_TRANSFER_ARGS="-r"
            fi

            $QUICKVM_TRANSFER_COMMAND $QUICKVM_TRANSFER_ARGS "$from" "$to"
            return $?
        fi
    else
        quickvm_log_error "VM '$vm' not running"
        return 1
    fi
}

function quickvm_cmd_print_ipaddr() {
    if quickvm_ensure_running "$1"; then
        local ipaddr
        ipaddr=$(__quickvm_get_ipaddr "$1")
        if [[ "$ipaddr" == "" ]]; then
            quickvm_log_error "VM '$1' has no ip address."
            return
        else
            echo "${ipaddr}"
        fi
    else
        return
    fi
}

function quickvm_cmd_launch_viewer() {
    if [[ $# -ne 1 ]]; then
        quickvm_log_error "invalid number of arguments"
        quickvm_help_for "view"
        return 1
    fi
    if which "$QUICKVM_VIEWER_APP"; then
        if quickvm_ensure_running "$1"; then
            "$QUICKVM_VIEWER_APP" -a -c "$QUICKVM_LIBVIRT_URL" "$1"
            return $?
        else
            quickvm_log_error "failed to start vm '$1'"
            return 1
        fi
    else
        quickvm_log_error "virt-viewer isn't installed"
        return 1
    fi
}

function quickvm_cmd_help() {
    echo "$QUICKVM_USAGE"
    keys=$(echo "${!QUICKVM_COMMANDS[*]}" | sed 's/ /\n/g' | sort | sed 's/\n/ /g')
    for k in $keys; do
        quickvm_help_for "$k"
    done
}

function quickvm_main() {
    if [[ $# -eq 0 ]]; then
        quickvm_cmd_help
        return
    fi

    quickvm_read_config

    local cmd
    cmd="$1"
    shift 1

    if [[ $# -eq 1 ]]; then
        if [[ "$1" == "--help" || "$1" == "help" ]]; then
            quickvm_help_for "$cmd"
            return 0
        fi
    fi

    case "$cmd" in
    "clone")
        quickvm_cmd_clone "$@"
    ;;
    "list")
        quickvm_cmd_list "$@"
    ;;
    "shell")
        quickvm_cmd_shell "$@"
    ;;
    "start")
        quickvm_cmd_start "$@"
    ;;
    "stop")
        quickvm_cmd_stop "$@"
    ;;
    "stop-all")
        quickvm_cmd_stopall "$@"
    ;;
    "trash")
        quickvm_cmd_trash "$@"
    ;;
    "ipaddr")
        quickvm_cmd_print_ipaddr "$@"
    ;;
    "view")
        quickvm_cmd_launch_viewer "$@"
    ;;
    "sshkeys")
        quickvm_cmd_install_sshkeys "$@"
    ;;
    "virsh")
        quickvm_cmd_virsh "$@"
    ;;
    "push")
        quickvm_cmd_transfer "push" "$@"
    ;;
    "pull")
        quickvm_cmd_transfer "pull" "$@"
    ;;
    *) quickvm_cmd_help ;;
    esac
}


if [[ $(basename "$0") == "quickvm" ]]; then
    quickvm_main "$@"
fi
